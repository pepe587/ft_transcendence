input {
    tcp {
        port => 5044
        codec => json
    }
    udp {
        port => 5044
        codec => json
    }
}

filter {   
    # Filtra los logs de nginx
    if [message] =~ /nginx/ {
        mutate {
            add_field => { "source" => "nginx" }
        }
        # Usa un filtro grok ajustado para manejar este formato específico de log de nginx
        grok {
            match => { "message" => "<%{INT:syslog5424_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} nginx: %{IPORHOST:remote_addr} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:body_bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\"" }
        }

        date {
            match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
            target => "@timestamp"
        }

        # Extrae solo la primera parte del campo request
        mutate {
            add_field => { "first_path" => "%{request}" }
        }

        # Establecer un valor por defecto de "/" si first_path es igual a "%{request}"
        if [first_path] == "%{request}" {
            mutate { replace => { "first_path" => "/" } }
        }

        # Usa un filtro conditional para manejar el primer segmento de la URL
        if [first_path] =~ "^/api/" {
            mutate { gsub => [ "first_path", "^(/api/[^/]*)(/.*)?$", "\1" ] }
        } else if [first_path] =~ "^/ws/" {
            mutate { gsub => [ "first_path", "^(/ws/[^/]*)(/.*)?$", "\1" ] }
        } else {
            mutate { gsub => [ "first_path", "^(/[^/]*).*", "\1" ] }
        }
    }
    else {
		# Todos los demás logs son "micro" por defecto
        mutate { add_field => { "source" => "micro" } }
        
        # Intentar parsear el mensaje como JSON si parece serlo
        if [message] =~ /^\{.*\}$/ {
            json {
                source => "message"
                skip_on_invalid_json => true
            }
        }
    }
}

output {
    stdout { codec => rubydebug }
    if [source] == "nginx" {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOSTS}"]
            index => "nginx_%{+YYYY.MM.dd}"
            user => "${ELASTICSEARCH_USERNAME}"
            password => "${ELASTICSEARCH_PASSWORD}"
        }
    } else {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOSTS}"]
            index => "micro_%{+YYYY.MM.dd}"
            user => "${ELASTICSEARCH_USERNAME}"
            password => "${ELASTICSEARCH_PASSWORD}"
        }
    }
}