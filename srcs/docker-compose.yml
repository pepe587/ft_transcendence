
services:


# ----------------- WEB SERVER ----------------- #


  # Nginx (80, 443 & 9113)
  nginx:
    container_name: nginx                             # Container name
    build:
      context: ./backend/nginx                        # Location of the Dockerfile
    volumes:
      - frontend_data:/usr/share/nginx/html           # Bind mount (instant changes)
    ports:
      - "8082:80"                                       # Port for HTTP
      - "8443:443"                                     # Port for HTTPS
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

# ------------------- METRICS ------------------ #


  # Prometheus (9090)
  prometheus:
    container_name: prometheus                        # Container name
    build:
      context: ./backend/metrics/prometheus           # Location of the Dockerfile
    volumes:
      - prometheus_data:/prometheus                   # Prometheus data volume
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # Grafana (3000)
  grafana:
    container_name: grafana                           # Container name
    build:
      context: ./backend/metrics/grafana              # Location of the Dockerfile
    env_file: .env                                    # File with environment variables
    environment:
      - GF_SERVER_ROOT_URL=https://localhost/grafana/ # Base path for Grafana
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASS}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # AlertManager (9093)
  alertmanager:
    container_name: alertmanager                      # Container name
    build:
      context: ./backend/metrics/alertmanager         # Location of the Dockerfile
    volumes:
      - alertmanager_data:/alertmanager
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # Portainer (9000)
  portainer:
    container_name: portainer                         # Container name
    env_file: .env                                    # File with environment variables
    build:
      context: ./backend/metrics/portainer            # Location of the Dockerfile
      args:
        PORTAINER_PASSWORD: ${ADMIN_PASS}
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock     # Allows the container to access the Docker daemon
      - /run/user/${UID}/docker.sock:/var/run/docker.sock  # change number 104347 to user id
      - portainer_data:/data
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure
    environment:
      - UID=${UID}  # Pasar UID como variable de entorno

  # Cadvisor (8080)
  cadvisor:
    container_name: cadvisor                          # Container name
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro                                  # Acceso al sistema de archivos raíz
      - /sys:/sys:ro                                  # Acceso al sistema de archivos sys
      - /var/run:/var/run:ro                          # Acceso a la información de contenedores
      - /var/lib/docker/:/var/lib/docker:ro           # Acceso a los datos de Docker
      - /run/user/${UID}/docker.sock:/var/run/docker.sock
    ports:
      - "8090:8080"
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure
    environment:
      - UID=${UID}  # Pasar UID como variable de entorno


# ------------------- LOGGING ------------------ #


  # ElasticSearch (9200 & 9114)
  elasticsearch:
    container_name: elasticsearch                     # Container name
    build:
      context: ./backend/logging/elasticsearch        # Location of the Dockerfile
    env_file: .env                                    # File with environment variables
    environment:
      - discovery.type=single-node                    # Set to single-node mode (multi-node clustering is unnecessary for this project)
      - xpack.security.enabled=true                   # Enable security features (e.g., authentication)
      - logger.level=ERROR                            # Set logging level to show only errors (TRACE, DEBUG, INFO, WARN, ERROR, FATAL)
      - ES_USERNAME=elastic
      - ES_PASSWORD=${ADMIN_PASS}
      - ELASTIC_PASSWORD=${ADMIN_PASS}
    volumes:
      - elastic_data:/usr/share/elasticsearch/data    # Bind mount (temporary)
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # LogStash (5044)
  logstash:
    container_name: logstash                          # Container name
    build:
      context: ./backend/logging/logstash             # Location of the Dockerfile
    env_file: .env                                    # File with environment variables
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ADMIN_PASS}
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # Kibana (5601)
  kibana:
    container_name: kibana                            # Container name
    image: docker.elastic.co/kibana/kibana:7.17.4
    env_file: .env                                    # File with environment variables
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch URL
      - SERVER_BASEPATH=/kibana                       # Base path for Kibana
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ADMIN_PASS}
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# ------------------- REDIS ------------------- #

  # Redis (6379)
  redis:
    container_name: redis                             # Container name
    image: redis:latest
    volumes:
      - redis_data:/data
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# --------------- MICRO-SERVICES --------------- #




# ------------------ VOLUMES ------------------- #


volumes:
  prometheus_data:                                    # Prometheus data volume
  grafana_data:                                       # Grafana data volume
  alertmanager_data:                                  # AlertManager data volume
  portainer_data:                                     # Portainer data volume
  elastic_data:                                       # ElasticSearch data volume
  redis_data:                                         # Redis data volume
    driver: local                                     # Use the local driver for this volume
    driver_opts:
      type: none                                      # Use a bind mount instead of creating a separate filesystem
      device: ./backend/logging/data                  # Path in the host filesystem for the bind mount
      o: bind                                         # Activate the bind mount
  frontend_data:
    driver: local                                     # Use the local driver for this volume
    driver_opts:
      type: none                                      # Use a bind mount instead of creating a separate filesystem
      device: ./frontend                              # Path in the host filesystem for the bind mount
      o: bind                                         # Activate the bind mount

# ------------------ NETWORK ------------------- #

networks:
  pong-net:
    name: pong-net                                    # Network connecting all containers
